---
import { SEO } from "astro-seo";
import { SITE_URL } from "@/data/config";
import Analytics from "./analytics.astro";

type Props = {
  title?: string;
  description?: string;
  keywords?: string[];
  noindex?: boolean;
  og?: {
    title?: string;
    type?: string;
    description?: string;
    image?: string;
    alt?: string;
  };
  article?: {
    publishedTime?: string; // ISO string
    modifiedTime?: string; // ISO string
    author?: string;
    section?: string;
    tags?: string[];
  };
  extraLinks?: { rel: string; href: string; type?: string; title?: string }[];
  extraMeta?: Record<string, string>[];
};

const { title, description, keywords = [], noindex, og, article, extraLinks = [], extraMeta = [] } = Astro.props;

const DEFAULT_TITLE_PAGE = "Mahmudul Alam";
const DEFAULT_DESCRIPTION_PAGE =
  "Senior Software Engineer from Bangladesh. I love to create technology and use it to make people's lives easier.";
const DEFAULT_URL_SITE = SITE_URL;

const absolutizeUrl = (input?: string): string | undefined => {
  if (!input) return undefined;
  try {
    // If already absolute
    const asUrl = new URL(input);
    return asUrl.toString();
  } catch {
    // Relative path
    return new URL(input, DEFAULT_URL_SITE).toString();
  }
};

const currentUrl = new URL(Astro.url.pathname + Astro.url.search, DEFAULT_URL_SITE).toString();

const openGraph = {
  title: og?.title || title || DEFAULT_TITLE_PAGE,
  type: og?.type || "website",
  image: absolutizeUrl(og?.image || "/opengraph-image.png"),
  alt: og?.alt || "Mahmudul Alam",
  url: currentUrl,
  description: og?.description || description || DEFAULT_DESCRIPTION_PAGE,
};

const websiteLd = {
  '@context': 'https://schema.org',
  '@type': 'WebSite',
  name: 'Mahmudul Alam',
  url: DEFAULT_URL_SITE,
  potentialAction: {
    '@type': 'SearchAction',
    target: `${DEFAULT_URL_SITE}/posts?query={search_term_string}`,
    'query-input': 'required name=search_term_string',
  },
};

const breadcrumbItems = Astro.url.pathname
  .split('/')
  .filter(Boolean)
  .map((segment, index, arr) => {
    const position = index + 1;
    const itemUrl = new URL('/' + arr.slice(0, index + 1).join('/'), DEFAULT_URL_SITE).toString();
    const name = segment.replace(/[-_]/g, ' ');
    return {
      '@type': 'ListItem',
      position,
      name,
      item: itemUrl,
    };
  });

const webPageLd = {
  '@context': 'https://schema.org',
  '@type': 'WebPage',
  url: currentUrl,
  name: openGraph.title,
  description: openGraph.description,
  breadcrumb: breadcrumbItems.length
    ? {
        '@type': 'BreadcrumbList',
        itemListElement: breadcrumbItems,
      }
    : undefined,
};

const articleLd = (og?.type === 'article' || article)
  ? {
      '@context': 'https://schema.org',
      '@type': 'Article',
      headline: openGraph.title,
      description: openGraph.description,
      datePublished: article?.publishedTime,
      dateModified: article?.modifiedTime || article?.publishedTime,
      author: article?.author
        ? { '@type': 'Person', name: article.author }
        : undefined,
      mainEntityOfPage: {
        '@type': 'WebPage',
        '@id': currentUrl,
      },
      image: openGraph.image ? [openGraph.image] : undefined,
    }
  : undefined;
---

<head>
  <SEO
    charset="UTF-8"
    title={openGraph.title}
    description={openGraph.description}
    noindex={noindex || false}
    openGraph={{
      basic: {
        title: openGraph.title,
        type: openGraph.type,
        image: openGraph.image || new URL('/opengraph-image.png', DEFAULT_URL_SITE).toString(),
      },
      image: {
        alt: openGraph.alt,
      },
    }}
    twitter={{
      creator: "@mahmudul__alam",
    }}
    extend={{
      link: [
        { rel: "icon", href: "/favicon.ico" },
        { rel: "sitemap", href: "/sitemap-index.xml" },
        { rel: "canonical", href: currentUrl },
        { rel: "alternate", type: "application/rss+xml", title: "RSS", href: "/rss.xml" },
        ...extraLinks,
      ],
      meta: [
        { property: "og:site_name", content: "Mahmudul Alam" },
        { name: "viewport", content: "width=device-width, initial-scale=1" },
        { name: "generator", content: Astro.generator },
        ...(keywords.length ? [{ name: "keywords", content: keywords.join(", ") }] : []),
        { property: "og:description", content: openGraph.description },
        {
          name: "twitter:image",
          content: openGraph.image || new URL('/opengraph-image.png', DEFAULT_URL_SITE).toString(),
        },
        { name: "twitter:card", content: "summary_large_image" },
        { name: "twitter:title", content: openGraph.title },
        { name: "twitter:description", content: openGraph.description },
        { name: "twitter:site", content: "@mahmudul__alam" },
        { property: "og:url", content: currentUrl },
        { property: "og:image:width", content: "1200" },
        { property: "og:image:height", content: "630" },
        ...(article?.author ? [{ name: "author", content: article.author }] : []),
        ...(og?.type === "article" || article
          ? [
              ...(article?.publishedTime
                ? [{ property: "article:published_time", content: article.publishedTime }]
                : []),
              ...(article?.modifiedTime
                ? [{ property: "article:modified_time", content: article.modifiedTime }]
                : []),
              ...(article?.author
                ? [{ property: "article:author", content: article.author }]
                : []),
              ...(article?.section
                ? [{ property: "article:section", content: article.section }]
                : []),
              ...((article?.tags || []).map((tag) => ({ property: "article:tag", content: tag }))),
            ]
          : []),
        ...extraMeta,
      ],
    }}
  />
  <link rel="sitemap" href="/sitemap-index.xml" />
  <script type="application/ld+json" set:html={JSON.stringify(websiteLd)}></script>
  <script type="application/ld+json" set:html={JSON.stringify(webPageLd)}></script>
  {articleLd && (
    <script type="application/ld+json" set:html={JSON.stringify(articleLd)}></script>
  )}
  
  <Analytics />
</head>
