---
import "odometer/themes/odometer-theme-default.css";

import type { CollectionEntry } from "astro:content";
import formatDate from "@/utils/formatDate";
import Eye from "@/utils/icons/eye.astro";

import { Odometer } from "@/components/odometer";
import { Upvote } from "@/components/upvote";

export const prerender = true;

export interface Props {
  post: CollectionEntry<"posts">;
}

const { post } = Astro.props;

const viewsAPI = await fetch(`${Astro.url.origin}/api/view/${post.slug}`, {
  method: "GET",
});
const { views } = await viewsAPI.json().catch(() => ({ views: 0 }));
const isPlanned = post.data.planned;
---

<a
  class:list={[
    "group flex h-full w-full cursor-pointer flex-col justify-between rounded-lg border border-neutral-700 bg-neutral-800/30 p-6 transition-all duration-300 hover:-translate-y-1 hover:border-neutral-500 hover:bg-neutral-800/50 hover:shadow-xl hover:shadow-neutral-900/50",
    !isPlanned && "hover:text-neutral-100",
  ]}
  href={post.data.planned ? null : `/posts/${post.slug}`}
>
  <div class="flex flex-col gap-4">
    <div class="flex items-start justify-between gap-3">
      <h3 class="text-lg font-semibold text-neutral-100 line-clamp-2 group-hover:text-white">
        {post.data.title}
      </h3>
      {
        !post.data.planned && (
          <svg
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            class="mt-1 flex-shrink-0 text-neutral-400 transition-all duration-300 group-hover:translate-x-1 group-hover:text-neutral-300"
          >
            <path
              d="M6 14L14 6"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
            <path
              d="M6 6H14V14"
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
        )
      }
    </div>
    
    <p class="text-sm text-neutral-400 line-clamp-3 group-hover:text-neutral-300">
      {post.data.description}
    </p>
  </div>

  <div class="mt-4 flex items-center justify-between">
    {
      isPlanned ? (
        <div class="flex items-center gap-2">
          <Upvote client:only slug={post.slug} />
        </div>
      ) : (
        <div class="flex items-center gap-2 text-xs text-neutral-500 group-hover:text-neutral-400">
          <Eye />
          <Odometer client:only data={views} />
          <span>views</span>
        </div>
      )
    }
    
    {
      !isPlanned && (
        <span class="text-xs text-neutral-500 group-hover:text-neutral-400">
          {formatDate(post.data.publishedAt)}
        </span>
      )
    }
  </div>
</a>
